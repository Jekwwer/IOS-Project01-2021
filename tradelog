#!/bin/bash
# File: tradelog
# Purpose: Process trading logs to output ticker information, calculate profits, and generate visualizations.
# Usage: ./tradelog [options] [arguments]
# Options include:
#   - list tickers from log files
#   - calculate and show profits
#   - display last prices
#   - show historical orders
#   - graph positions with a specified width
# This script requires POSIXLY_CORRECT and LC_ALL environment variables to be set for proper execution.
# Author: Evgenii Shiliaev
# Date: April 3rd, 2021
#
# Repo Link: https://github.com/Jekwwer/IOS-Project01-2021
#
# This script supports various operations on trading logs, such as listing tickers, 
# calculating profits, showing positions, last traded prices, historical orders, 
# and graphing positions based on user input. It uses command-line options to 
# determine the operation mode. For detailed usage instructions, run the script 
# with the help option.


## VARIABLES ##
# Some variables exports for correct script working
export POSIXLY_CORRECT=yes
export LC_ALL=C

# Some variables for storing arguments
TICKERS=""
LOG_FILES=""

# Default values for option variables
WIDTH=-1    #TODO READONLY

# Default values for command-flag variables
NUM_OF_COMMANDS=0
is_list_tick=0
is_profit=0
is_pos=0
is_last_price=0
is_hist_ord=0
is_graph_pos=0
is_width=0

## FUNCTIONS ##
# Function that prints help message for the user
function print_help() {
  echo "Usage: tradelog [-h|--help] [FILTER] [COMMAND] [LOG FILES]"
  echo "Shows stocks information(analyzing, statistics, filtering) by user requirements"
  echo ""
  echo "FILTERS"
  echo "  -a DATETIME       process records AFTER the given date(without it)"
  echo "                      DATETIME is given in the format YYYY-MM-DD HH:MM:SS"
  echo "  -b DATETIME       process records BEFORE given date(without it)"
  echo "                      DATETIME is given in the format YYYY-MM-DD HH:MM:SS"
  echo "  -t ticker         process records with given ticker"
  echo "                      ticker is a string without a semicolon(;) and white characters"
  echo "                      if the filter acquires multiple times process"
  echo "                      records with the given TICKERS"
  echo "  -w WIDTH          set the maximum width of the longest line in graphs "
  echo "  -h --help         display this help message and exit"
  echo ""
  echo "COMMANDS"
  echo "  list_tick         print a list of tickers found in the LOG"
  echo "  profit            print total gain"
  echo "  pos               print a list of obtained stocks in descending order by value"
  echo "  last-price        print the last known price for each ticker"
  echo "  hist-ord          print a histogram of the transaction number for each ticker"
  echo "  graph-pos         print a graph of obtained stocks values for each ticker"
  exit
}

## INPUT PROCESSING FUNCTIONS
# Function that processes input
function process_the_input() {
  local input_string=""
  local file_content=""
  if [ "$LOG_FILES" != "" ]; then           # IF user specify input file
    local array_of_files=("$LOG_FILES")
    for file in ${array_of_files[*]}; do    # open every file and write its content to the variable
      if [ -r "$file" ]; then               # if file is readable
        if [[ "$file" == *".gz"* ]]; then   # if it's a .gz file
          file_content=$(gzip -dc "$file")
        else
          file_content=$(cat "$file")
        fi
      else                                  # if file is not readable
        error_exit "Error: input file $file doesn't exist"
      fi
      if [ "$input_string" == "" ]; then    # if it's the first file
        input_string="$file_content"
      else
        input_string+=$(echo "$file_content" | awk 'BEGIN {printf("\n")} {print}')
      fi
    done
  else
    cat                                     # ELSE get input from stdin
  fi
  echo "$input_string" | filter_the_input   # filter the input by given filters(if any)
}

# Function that filters input
function filter_the_input() {
  # -a -b -t
  if [ "$BEFORE_TIME" != "" ] && [ "$AFTER_TIME" != "" ] && [ "$TICKERS" != "" ]; then
    print_by_tickers | print_before_time | print_after_time
  # -a -b
  elif [ "$BEFORE_TIME" != "" ] && [ "$AFTER_TIME" != "" ]; then
    print_before_time | print_after_time
  # -b -t
  elif [ "$BEFORE_TIME" != "" ] && [ "$TICKERS" != "" ]; then
    print_by_tickers | print_before_time
  # -a -t
  elif [ "$AFTER_TIME" != "" ] && [ "$TICKERS" != "" ]; then
    print_by_tickers | print_after_time
  # -b
  elif [ "$BEFORE_TIME" != "" ]; then
    print_before_time
  # -a
  elif [ "$AFTER_TIME" != "" ]; then
    print_after_time
  # -t
  elif [ "$TICKERS" != "" ]; then
    print_by_tickers
  # none
  else
    cat
  fi
}

# Function that processes entered by user command (if any)
function process_the_commands() {
  if [ $is_list_tick -eq 1 ]; then
    list_tick
  elif [ $is_profit -eq 1 ]; then
    profit
  elif [ $is_pos -eq 1 ]; then
    pos | sort -k2nr -t:
  elif [ $is_last_price -eq 1 ]; then
    last_price
  elif [ $is_hist_ord -eq 1 ]; then
    hist_ord
  elif [ $is_graph_pos -eq 1 ]; then
    graph_pos
  else
    cat
  fi
}

## CHECKING FUNCTIONS
# Function that checks DATETIME argument by regular expression
function check_datetime() { #TODO MORE PRECISE REGEX
  local datetime_regex='([0-9]{4})-([0-1][0-9])-([0-3][0-9]) ([0-2][0-9]:[0-5][0-9]:[0-5][0-9])'
  if ! [[ $1 =~ $datetime_regex ]]; then
    error_exit "Error: DATETIME argument is not in format YYYY-MM-DD HH:MM:SS or given invalid time"
  fi
}

# Function that checks number of commands given by user
function check_num_of_commands() {
    if [ $NUM_OF_COMMANDS -eq 1 ]; then
      error_exit "Error: only one command must be entered"
    else
      NUM_OF_COMMANDS=1
      readonly NUM_OF_COMMANDS
    fi
}

## EXIT FUNCTION
# Function that finishes the program with error message
function error_exit() {
  echo "$1" 1>&2
  exit 1
}

## FILTERING FUNCTIONS
# Function that prints records after date time given by user
function print_after_time() {
  awk -v after_time="$AFTER_TIME" -F';' '
  {if (after_time < $1)
    print $0}'
}

# Function that prints records before date time given by user
function print_before_time() {
  awk -v before_time="$BEFORE_TIME" -F';' '
  {if (before_time > $1)
    print $0}'
}

# Function that prints records by tickers, which are given by user
function print_by_tickers() {
  local array_of_tickers=("$TICKERS")
  awk -v array_of_tickers="${array_of_tickers[*]}" -F';' '
  BEGIN {
  n = split(array_of_tickers,arr_of_t," ");
  for (i = 1; i <= n; i++)
    tickers[arr_of_t[i]]
  }
  $2 in tickers {print}'
}

## COMMAND FUNCTIONS WITH THEIR SUBFUNCTIONS
# Function that prints the list of tickers
function list_tick() {
  echo "$INPUT" | awk -F';' '{print $2}' | sort -u
}

# Function that prints profit of deals
function profit() {
  awk -F';' '
  BEGIN {profit = 0}
  {if ($3 == "buy")
    profit = profit - ($4 * $6)
  else
    profit = profit + ($4 * $6)}
  END {printf("%.2f\n", profit)}'
}

# Function that finds the longest num in 'pos' output and returns its length
function get_length_of_the_longest_num_pos() {
  local array_of_tickers=($(list_tick))
  local max_length=0
  local num=""
  for ticker in ${array_of_tickers[*]}; do    # calculate value for every ticker
    num=$(echo "$INPUT" | awk -v ticker="$ticker" -F';' '
    BEGIN {num = 0; len = 12}
    {if ($2 == ticker && $3 == "buy")
      num = num + $6
    if ($2 == ticker && $3 == "sell")
      num = num - $6
    if ($2 == ticker)
      last = $4}
    END {printf("%.2f", last * num)}')
    if [ ${#num} -gt $max_length ]; then      # if it's longer
      max_length=${#num}                      # save its length
    fi
  done
  echo "$max_length"                          # return the length of the longest value
}

# Functions that prints list of obtained stocks values in descending order
function pos() {
  local column_width=""
  column_width=$(get_length_of_the_longest_num_pos)
  local array_of_tickers=($(list_tick))
  for ticker in ${array_of_tickers[*]}; do
    echo "$INPUT" | awk -v ticker="$ticker" -v len="$column_width" -F';' '
    BEGIN {num = 0; len++}
    {if ($2 == ticker && $3 == "buy")
      num = num + $6
    if ($2 == ticker && $3 == "sell")
      num = num - $6
    if ($2 == ticker)
      last = $4}
    END {printf("%-10s:%*.2f\n", ticker, len, last * num)}'
  done
}

# Function that finds the longest num in 'last_price' output and returns its length
function get_length_of_the_longest_num_lp() {
  local array_of_tickers=($(list_tick))
  local max_length=0
  for ticker in ${array_of_tickers[*]}; do      # find last price for every ticket
    num=$(echo "$INPUT" | awk -v ticker="$ticker" -F';' '
    BEGIN {last = 0}
    {if ($2 == ticker)
      last = $4}
    END {printf("%.2f", last)}')
    if [ ${#num} -gt $max_length ]; then        # if it's longer
      max_length=${#num}                        # save its length
    fi
  done
  echo "$max_length"                            # return the length of the longest value
}

# Function that prints last price of a stock of each ticker
function last_price() {
  local column_width=""
  column_width=$(get_length_of_the_longest_num_lp)
  array_of_tickers=($(list_tick))
  for ticker in ${array_of_tickers[*]}; do
    echo "$INPUT" | sort -k1 -t\; | awk -v ticker="$ticker" -v len="$column_width" -F';' '
    BEGIN {last = 0; len++}
    {if ($2 == ticker)
      last = $4}
    END {printf("%-10s:%*.2f\n", ticker, len, last)}'
  done
}

# Function that finds the maximum number of transactions by each ticker
function find_max_num_of_transactions() {
  array_of_tickers=($(list_tick))
  local max_num_of_trnsc=0
  for ticker in ${array_of_tickers[*]}; do        # count number of transactions for every ticket
    tmp=$(echo "$INPUT" | awk -v ticker="$ticker" -F';' '
    BEGIN {num = 0}
    {if ($2 == ticker)
      num++}
    END {print num}')
    if [ "$tmp" -gt $max_num_of_trnsc ]; then     # if it's bigger
      max_num_of_trnsc=$tmp                       # save the value
    fi
  done
  echo "$max_num_of_trnsc"                        # return maximum
}

# Function that prints a histogram of the number of transactions according to the ticker
# with maximum width given by user (if any)
function hist_ord() {
  # Setting the width
  local max_num_of_trnsc=""
  if [ $WIDTH -eq -1 ]; then # if user doesn't set WIDTH
    max_num_of_trnsc=$WIDTH
  else
    max_num_of_trnsc=$(find_max_num_of_transactions)
  fi
  # Printing the histogram
  local array_of_tickers=($(list_tick))
  for ticker in ${array_of_tickers[*]}; do
    echo "$INPUT" | awk -v ticker="$ticker" -v max=$max_num_of_trnsc -v width=$WIDTH -F';' '
    BEGIN {num = 0}
    {if ($2 == ticker)
      num++}
    END {
      {printf("%-10s: ", ticker)
      for (i = 1; i <= num/(max/width); i++)
        printf("#")
      printf("\n")}}'
  done
}

# Function that finds the largest absolute value from output of 'pos' function
function find_largest_abs_value_of_pos() {
  local largest_abs_value=""
  largest_abs_value=$(awk -F':' '
    BEGIN {num = 0; max = 0}
    {if ($2 >= 0)
      num = $2
    else
      num = -$2
    if (num > max)
      max = num}
    END {printf("%.2f\n", max)}')

  echo "$largest_abs_value"               # Return the largest absolute value
}

# Function that prints a graph of obtained stocks values
function graph_pos() {
  local largest_abs_value=""
  largest_abs_value=$(pos | find_largest_abs_value_of_pos)
  # Setting the width
  if [ $WIDTH -eq -1 ]; then # if user doesn't set WIDTH
    WIDTH=$(awk -v max="$largest_abs_value" 'BEGIN{print max/1000}' "$INPUT")
  fi
  # Printing the graph
  pos | awk -v max="$largest_abs_value" -v width="$WIDTH" -F':' '
    {printf("%s:", $1)
    if ($2 >= 0)
    {for (i = 1; i <= $2/(max/width); i++){
        if (i == 1)
          printf(" ")
        printf("#")}
      printf("\n")}
    else
      {for (i = -1; i >= $2/(max/width); i--){
        if (i == -1)
          printf(" ")
        printf("!")}
      printf("\n")}}'
}

## MAIN FUNCTION
function main() {

  # OPTIONS PROCESSING
  while getopts :ha:b:t:w: o; do
    case "$o" in
    h)
      print_help
      ;;
    a)
      AFTER_TIME="$OPTARG"
      check_datetime "$AFTER_TIME"
      ;;
    b)
      BEFORE_TIME="$OPTARG"
      check_datetime "$BEFORE_TIME"
      ;;
    t)
      if [[ "$OPTARG" == *" "* ]] || [[ "$OPTARG" == *";"* ]]; then
        error_exit "Error: TICKER must be a string without a semicolon(;) and white characters"
      fi
      TICKERS="$TICKERS $OPTARG"
      ;;
    w)
      # Argument checking
      if ! [ $is_width -eq 1 ]; then
        is_width=1
        WIDTH="$OPTARG"
        WIDTH_CHECK='^[0-9]+$'
        # if WIDTH is a positive integer
        if ! [[ $WIDTH =~ $WIDTH_CHECK ]] || [ "$WIDTH" -le 0 ]; then
          error_exit "Error: WIDTH must be a positive integer"
        fi
      else
        error_exit "Error: option '-w' must occur only once"
      fi
      ;;
    *)
      # if was written the correct option buut without an argument
      if [ "$OPTARG" == "a" ] || [ "$OPTARG" == "b" ] ||
        [ "$OPTARG" == "t" ] || [ "$OPTARG" == "w" ]; then
        error_exit "Error: no argument after the -$OPTARG option"
      fi

      if [[ "$*" != *"--help"* ]]; then
        error_exit "Error: Option doesn't exist"
      fi
      ;;
    esac
  done

  # options' arguments become constants won't be changed anymore
  readonly AFTER_TIME
  readonly BEFORE_TIME
  readonly TICKERS

  # ARGUMENTS PROCESSING
  ((OPTIND--))
  shift $OPTIND
  for _ in $*; do
    if [ "$1" == "list-tick" ]; then
      check_num_of_commands
      is_list_tick=1
    elif [ "$1" == "profit" ]; then
      check_num_of_commands
      is_profit=1
    elif [ "$1" == "pos" ]; then
      check_num_of_commands
      is_pos=1
    elif [ "$1" == "last-price" ]; then
      check_num_of_commands
      is_last_price=1
    elif [ "$1" == "hist-ord" ]; then
      check_num_of_commands
      is_hist_ord=1
    elif [ "$1" == "graph-pos" ]; then
      check_num_of_commands
      is_graph_pos=1
    elif [ "$1" == "--help" ]; then
      print_help
    else
      if [ "$LOG_FILES" == "" ]; then
        LOG_FILES="$1"
      else
        LOG_FILES="$LOG_FILES $1"
      fi
    fi
    shift
  done

  # list of input files(if any) won't be changed anymore
  readonly LOG_FILES

  #INPUT PROCESSING
  INPUT="$(process_the_input)"
  if [ $? -eq 1 ]; then
    exit 1
  fi
  readonly INPUT

  # RESULT PROCESSING
  echo "$INPUT" | process_the_commands

} ## END OF THE MAIN FUNCTION

## START OF THE PROGRAM
main "$@"
## END OF THE PROGRAM

# End of tradelog
